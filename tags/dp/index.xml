<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DP on SHENXN</title><link>https://www.sxn.dev/tags/dp/</link><description>Recent content in DP on SHENXN</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sat, 17 May 2014 07:39:32 +0000</lastBuildDate><atom:link href="https://www.sxn.dev/tags/dp/index.xml" rel="self" type="application/rss+xml"/><item><title>[BZOJ1003][ZJOI2006]物流运输（DP + DIJKSTRA）</title><link>https://www.sxn.dev/posts/zjoi2006-trans/</link><pubDate>Sat, 17 May 2014 07:39:32 +0000</pubDate><guid>https://www.sxn.dev/posts/zjoi2006-trans/</guid><description>&lt;p>好吧这就是一道大水题，很显然的DP思路。DP状态转移方程就是(dp_i = text{min}(f_{1,i}, dp_j + k + f_{j+1,i}) (1 leq j &amp;lt; i))，其中(f_{i,j})表示从i时刻到j时刻（包括i和j）走同一条路所需的总成本。而由于n和m都很小，这个直接暴力标记不能走的点然后做一次DIJKSTRA就可以了，同时把已经计算过的(f_{i,j})存下来，以便下次使用。这样的话总体的时间复杂度大概就是（原谅我不会算，随便乱估计的）(text{O}(n^2 log_2 m))。&lt;/p></description></item><item><title>[BZOJ1002][FJOI2007]轮状病毒（DP + 高精度）</title><link>https://www.sxn.dev/posts/fjoi2007-virus/</link><pubDate>Fri, 16 May 2014 15:25:47 +0000</pubDate><guid>https://www.sxn.dev/posts/fjoi2007-virus/</guid><description>&lt;p>这题的DP实在是太可怕，证明了半天，其实就是排列组合。最后证明出来的式子是&lt;/p>
&lt;p>(f_n = \begin{cases} 1 &amp;amp; (n = 1) \ 2 &amp;amp; (n = 2) \ 3 * f_{n-1} - f_{n-2} + 2 &amp;amp; (n \geq 3) \end{cases})&lt;/p></description></item></channel></rss>