<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SHENXN</title><link>https://www.sxn.dev/</link><description>Recent content on SHENXN</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Thu, 22 May 2014 12:50:09 +0000</lastBuildDate><atom:link href="https://www.sxn.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>[POJ2195]Going Home（KM算法）</title><link>https://www.sxn.dev/posts/poj2195/</link><pubDate>Thu, 22 May 2014 12:50:09 +0000</pubDate><guid>https://www.sxn.dev/posts/poj2195/</guid><description>&lt;p>就是一道KM的模板题，而且建图已经非常显然了。关于KM算法：&lt;/p>
&lt;blockquote>
&lt;p>KM算法流程：&lt;/p>
&lt;p>(1)初始化可行顶标值&lt;/p>
&lt;p>(2)用匈牙利算法寻找完备匹配&lt;/p>
&lt;p>(3)若未找到完备匹配则修改可行顶标的值&lt;/p>
&lt;p>(4)重复(2)(3)直到找到相等子图的完备匹配为止
上述内容转自：&lt;a href="http://www.360doc.com/content/11/0718/14/3701281_134273282.shtml">二分图匹配算法总结(phoenixinter)&lt;/a>，更详细的讲述详见原文。&lt;/p>
&lt;/blockquote></description></item><item><title>[BZOJ1189][HNOI2007]紧急疏散evacuate（二分答案 + 最大流）</title><link>https://www.sxn.dev/posts/hnoi2007-evacuate/</link><pubDate>Wed, 21 May 2014 18:17:40 +0000</pubDate><guid>https://www.sxn.dev/posts/hnoi2007-evacuate/</guid><description>&lt;p>做了好几题裸的最大流，来一道稍微不裸一点的（不过这种经典题也没什么好说的），首先题目二分答案，然后用最大流验证是否满流。首先要做一次BFS预处理，预处理出所有的空点到所有门的最短路。做最大流时，首先将源点向所有空位置连一条容量为1的边，将所有的门向汇点连一条容量为时间的边（一开始连了N * M的容量，坑了好久。。），再将所有空点向时间内能到达的门连一条容量为1的边。&lt;/p></description></item><item><title>[BZOJ1433][ZJOI2009]假期的宿舍（最大流）</title><link>https://www.sxn.dev/posts/zjoi2009-holiday/</link><pubDate>Tue, 20 May 2014 20:58:14 +0000</pubDate><guid>https://www.sxn.dev/posts/zjoi2009-holiday/</guid><description>&lt;p>又是一道最大流，建图很简单，源点到所有的在校学生和外校学生建一条容量为1的边，所有在校学生的床（感觉听起来怪怪的）到汇点连一条边，所有在校学生和自己的床连一条边，所有学生到他认识的在校学生的床连一条边。然后做最大流与需要住校的学生总数比较，相等就输出^_^，不相等就输出T_T（这个太逗了）。。&lt;/p></description></item><item><title>[BZOJ1066][SCOI2007]蜥蜴（最大流）</title><link>https://www.sxn.dev/posts/scoi2007-lizard/</link><pubDate>Tue, 20 May 2014 18:57:37 +0000</pubDate><guid>https://www.sxn.dev/posts/scoi2007-lizard/</guid><description>&lt;p>这道题就是最大流，首先对柱子进行拆点，一个入点和一个出点，入点向出点连一条容量为柱子高度的边，从每个柱子的出点，向可以一次跳到的所有柱子的入点连一条容量为当前柱子高度的边，再从每个可以一次跳出的柱子向汇点连一条容量为柱子高度的边，从源点向每个有蜥蜴的柱子的入点连一条容量为1的边，然后做一次最大流即可。当然答案输出的是不能跳出的蜥蜴，我被坑了好久233&lt;/p></description></item><item><title>[BZOJ1934][SHOI2007]Vote 善意的投票（最大流）</title><link>https://www.sxn.dev/posts/shoi-vote/</link><pubDate>Tue, 20 May 2014 15:16:49 +0000</pubDate><guid>https://www.sxn.dev/posts/shoi-vote/</guid><description>双倍经验题，详见 {% post_link jloi2010-champion %}</description></item><item><title>[BZOJ2768][JLOI2010]冠军调查（最大流 最高标号预流推进 + GAP优化）</title><link>https://www.sxn.dev/posts/jloi2010-champion/</link><pubDate>Tue, 20 May 2014 15:10:36 +0000</pubDate><guid>https://www.sxn.dev/posts/jloi2010-champion/</guid><description>&lt;p>这题很显然是一道最小割的题目，然后题目只要求最小割的容量，那么直接跑个最大流（关于最小割-最大流定理请自行谷歌），以前写过DINIC感觉不够高大上，然后果断来一个最高标号预流推进秀优越，事实上这个时间复杂度的确很优秀。一开始我写的没加GAP优化，400+ms，跑得比DINIC还慢，真是不爽，下午看到了一种叫GAP优化的东西，加上之后就28ms了，怒刷到rank2。&lt;/p></description></item><item><title>[BZOJ3595][SCOI2014]方伯伯的OJ（MAP + SPLAY）</title><link>https://www.sxn.dev/posts/scoi2014-oj/</link><pubDate>Mon, 19 May 2014 18:50:52 +0000</pubDate><guid>https://www.sxn.dev/posts/scoi2014-oj/</guid><description>&lt;p>这道题实在是坑爹，比赛的时候一度以为要两个MAP两棵SPLAY，然后感觉写着蛋疼就写了一个SPLAY 40分滚粗了。后来重新看题，发现其实AC算法也只要一个SPLAY就好了，还有一个SPLAY也可以用MAP来代替（在此BS一下PASCAL，问PASCAL党做这种题该怎么办）。&lt;/p></description></item><item><title>[BZOJ1862][ZJOI2006]GameZ游戏排名系统（SPLAY + TRIE / HASH）</title><link>https://www.sxn.dev/posts/zjoi-rank/</link><pubDate>Mon, 19 May 2014 13:01:02 +0000</pubDate><guid>https://www.sxn.dev/posts/zjoi-rank/</guid><description>传说中的双倍经验题，详见 {% post_link haoi2008-rank %}</description></item><item><title>[BZOJ1001][BEIJING2006]狼抓兔子（最小割 + DIJKSTRA）</title><link>https://www.sxn.dev/posts/beijing2006-animal/</link><pubDate>Mon, 19 May 2014 11:20:50 +0000</pubDate><guid>https://www.sxn.dev/posts/beijing2006-animal/</guid><description>&lt;p>这道题很裸的最小割，只是数据规模大，目测会T（WJS大爷说在BZ上能过，真是跪烂了），其实最小割可以转成最短路的做法。一种做法是转成对偶图然后求最短路，当然我不会，就只好去墙角画圈圈了。不过有一天没事乱翻LRJ的白书突然就翻到了这道题（我真的只是乱翻），然后就观摩了一下题解。转什么对偶图啊。。对于这道题，由于这个图样子比较特殊，可以知道割线必然是一条从图的左边界或下边界的边出发，经过若干条边到达右边界或上边界的边，需要的狼的数量就是经过的所有边的权值和。&lt;/p></description></item><item><title>[BZOJ1902][ZOJ2112]ZJU2112 Dynamic Rankings（树状数组 + 主席树）</title><link>https://www.sxn.dev/posts/zoj2112/</link><pubDate>Sun, 18 May 2014 20:27:06 +0000</pubDate><guid>https://www.sxn.dev/posts/zoj2112/</guid><description>&lt;p>终于学会了主席树，写了高贵冷艳的带修改区间第K大（虽然二逼平衡树我是用分块水的），关于不带修改的区间第K大参见我的上一篇博客{% post_link poj2104 %}，其实这个跟树状数组维护前缀和基本是一样的，只是修改时树状数组只需修改(log_2n)个节点，而现在需要修改(log_2n)棵线段树，一共(log_2^2n)个节点。这题在八中上妥妥A了，ZOJ被卡内存（内存小，数据规模还大，还有多组数据，改了半天），到现在都没卡过去，真是不开心。&lt;/p></description></item><item><title>[POJ2104]K-th Number（主席树）</title><link>https://www.sxn.dev/posts/poj2104/</link><pubDate>Sun, 18 May 2014 12:47:50 +0000</pubDate><guid>https://www.sxn.dev/posts/poj2104/</guid><description>&lt;p>终于下定决心开始学主席树了，先找了一道不带修改的区间第K大做。关于带修改的区间第K大，参见我的下一篇博客 {% post_link zoj2112 %}&lt;/p>
&lt;p>主席树其实就是一种可持久化的线段树，是函数式编程的一个很经典的应用（另外的话，我就只知道FANHQ_TREAP了）。主要思想是在对线段树的节点进行修改的时候，不改变原节点，而是新开一个节点并链到数中。&lt;/p></description></item><item><title>[BZOJ1012][JSOI2008]最大数（树状数组）</title><link>https://www.sxn.dev/posts/jsoi2008-maxnumber/</link><pubDate>Sun, 18 May 2014 09:11:29 +0000</pubDate><guid>https://www.sxn.dev/posts/jsoi2008-maxnumber/</guid><description>&lt;p>树状数组水了一题感觉不熟练就又水了一题。这题主要就是要把整个数列倒过来插，这样就可以把求后L项的最大数转化为求数列前L项的最大数。在树状数组中，维护一个数列大小size，每次插入就插入到第m - size的位置上，每次查询就查询前m - size + l项的最大值（前导零对答案不影响）。&lt;/p></description></item><item><title>[BZOJ2743][HEOI2012]采花（离线 + 树状数组）</title><link>https://www.sxn.dev/posts/heoi2012-flower/</link><pubDate>Sat, 17 May 2014 23:13:42 +0000</pubDate><guid>https://www.sxn.dev/posts/heoi2012-flower/</guid><description>&lt;p>打算开始学主席树了，然后发现好久没写树状数组，就找了道题练练手，谁知今天脑残不宜写题，WA了半天又T了半天。。&lt;/p></description></item><item><title>[BZOJ1207][HNOI2005]虚拟内存（HASH + SPLAY）</title><link>https://www.sxn.dev/posts/hnoi2007-memory/</link><pubDate>Sat, 17 May 2014 16:15:33 +0000</pubDate><guid>https://www.sxn.dev/posts/hnoi2007-memory/</guid><description>&lt;p>我原本妄图做一道HASH乱搞题，本以为这道题可以HASH + 优先队列，后来发现好像不行，然后又蛋疼地敲平衡树了。一开始敲了个FANHQ_TREAP，结果被卡，一个点退化了，只好改SPLAY。虽然不是很快，不过完全不知道这道题开50S时限是什么心态。&lt;/p></description></item><item><title>[BZOJ1003][ZJOI2006]物流运输（DP + DIJKSTRA）</title><link>https://www.sxn.dev/posts/zjoi2006-trans/</link><pubDate>Sat, 17 May 2014 07:39:32 +0000</pubDate><guid>https://www.sxn.dev/posts/zjoi2006-trans/</guid><description>&lt;p>好吧这就是一道大水题，很显然的DP思路。DP状态转移方程就是(dp_i = text{min}(f_{1,i}, dp_j + k + f_{j+1,i}) (1 leq j &amp;lt; i))，其中(f_{i,j})表示从i时刻到j时刻（包括i和j）走同一条路所需的总成本。而由于n和m都很小，这个直接暴力标记不能走的点然后做一次DIJKSTRA就可以了，同时把已经计算过的(f_{i,j})存下来，以便下次使用。这样的话总体的时间复杂度大概就是（原谅我不会算，随便乱估计的）(text{O}(n^2 log_2 m))。&lt;/p></description></item><item><title>[BZOJ1002][FJOI2007]轮状病毒（DP + 高精度）</title><link>https://www.sxn.dev/posts/fjoi2007-virus/</link><pubDate>Fri, 16 May 2014 15:25:47 +0000</pubDate><guid>https://www.sxn.dev/posts/fjoi2007-virus/</guid><description>&lt;p>这题的DP实在是太可怕，证明了半天，其实就是排列组合。最后证明出来的式子是&lt;/p>
&lt;p>(f_n = \begin{cases} 1 &amp;amp; (n = 1) \ 2 &amp;amp; (n = 2) \ 3 * f_{n-1} - f_{n-2} + 2 &amp;amp; (n \geq 3) \end{cases})&lt;/p></description></item><item><title>[BZOJ1056][HAOI2008]排名系统（SPLAY + TRIE / HASH）</title><link>https://www.sxn.dev/posts/haoi2008-rank/</link><pubDate>Thu, 15 May 2014 16:55:41 +0000</pubDate><guid>https://www.sxn.dev/posts/haoi2008-rank/</guid><description>&lt;p>只是一道平衡树水题，其实TREAP就可以了，只是有个操作我觉得还是SPLAY写起来舒服。一开始用的TRIE维护名字，后来又用HASH写了，稍微快了一点点。。&lt;/p></description></item><item><title>[BZOJ3196][TYVJ1730]二逼平衡树（分块·伪）</title><link>https://www.sxn.dev/posts/tyvj1730/</link><pubDate>Wed, 14 May 2014 18:37:34 +0000</pubDate><guid>https://www.sxn.dev/posts/tyvj1730/</guid><description>&lt;p>平衡树三道题终于全A了。为什么说分块是伪呢，毕竟这是平衡树的题目，然后我用了分块（我弱啊，不会树套）。听说TY上还有大爷直接用sort A掉了，这算什么嘛，还有话说我BZOJ上A掉的代码在TY上死活RE30分，还WA了两个点。不管了。。&lt;/p></description></item><item><title>[BZOJ3337]ORZJRY I（块状链表）</title><link>https://www.sxn.dev/posts/bzoj3337/</link><pubDate>Mon, 05 May 2014 19:03:46 +0000</pubDate><guid>https://www.sxn.dev/posts/bzoj3337/</guid><description>保佑我能写出来。。</description></item><item><title>[BZOJ3223][TYVJ1729]文艺平衡树（FANHQ_TREAP）</title><link>https://www.sxn.dev/posts/tyvj1729/</link><pubDate>Fri, 02 May 2014 19:53:46 +0000</pubDate><guid>https://www.sxn.dev/posts/tyvj1729/</guid><description>&lt;p>平衡树三件套的第三题目测要树套，我太弱了所以不会，只好接着用FANHQ_TREAP水第二题了。听说这题目只有一个操作，于是很高端地用了FANHQ_TREAP。但是莫名其妙写得好慢，比RANK1慢了1S多，一定是还有什么神奇的算法，求教。。&lt;/p></description></item><item><title>[BZOJ3223][TYVJ1728]普通平衡树（FANHQ_TREAP）</title><link>https://www.sxn.dev/posts/tyvj1728/</link><pubDate>Fri, 02 May 2014 19:47:13 +0000</pubDate><guid>https://www.sxn.dev/posts/tyvj1728/</guid><description>&lt;p>这道题就是裸裸的TREAP，然后TREAP的裸题好像已经写过了，于是决定试试写FANHQ TREAP，一开始我插入没写旋转，后来仔细研究了FANHQ的博客，才知道后来他加了旋转（说好的没有旋转呢），然后我去加了旋转果断快了50ms&lt;/p></description></item><item><title>[BZOJ1500][NOI2005]维修数列（SPLAY）</title><link>https://www.sxn.dev/posts/noi2005-sequence/</link><pubDate>Fri, 02 May 2014 19:34:56 +0000</pubDate><guid>https://www.sxn.dev/posts/noi2005-sequence/</guid><description>&lt;p>好像已经写了好多SPLAY了，维修数列说是最重口味的SPLAY题目了，好吧我也调了将近一上午，主要是最大子段和的地方自己YY错了，少考虑了一种情况。。&lt;/p></description></item><item><title>[BZOJ1269][AHOI2006]文本编辑器（SPLAY）</title><link>https://www.sxn.dev/posts/ahoi2006-editor/</link><pubDate>Fri, 02 May 2014 19:20:38 +0000</pubDate><guid>https://www.sxn.dev/posts/ahoi2006-editor/</guid><description>&lt;p>好吧这道题是NOI的那道EDITOR的升级版，就多了一个翻转操作，那不是改一下就行了嘛，果断继续A题&lt;/p></description></item><item><title>[BZOJ1507][NOI2003]文本编辑器（SPLAY）</title><link>https://www.sxn.dev/posts/noi2003-editor/</link><pubDate>Fri, 02 May 2014 19:16:08 +0000</pubDate><guid>https://www.sxn.dev/posts/noi2003-editor/</guid><description>&lt;p>这题我一开始用块链写的，后来也许是memcpy上的问题本地AC了八中上死活A不掉，后来也就没去改。。几天后学了SPLAY，那就用SPLAY水掉了。&lt;/p>
&lt;p>然后是代码（这个不是蛋疼模板了，我重写的SPLAY）&lt;/p></description></item><item><title>[BZOJ1861][ZJOI2006]书架（SPLAY）</title><link>https://www.sxn.dev/posts/zjoi2006-book/</link><pubDate>Fri, 02 May 2014 18:24:46 +0000</pubDate><guid>https://www.sxn.dev/posts/zjoi2006-book/</guid><description>&lt;p>听说标程是树状数组，听说树状数组跑得可快了。。好吧拿这题来学SPLAY的确有点做死不过也还算裸&lt;/p>
&lt;p>SPLAY要维护的东西很清楚，就是要单独开个数组指向SPLAY上每个节点，以方便根据编号找节点。&lt;/p></description></item><item><title>[BZOJ1208][HNOI2004]宠物收养所（treap）</title><link>https://www.sxn.dev/posts/hnoi2004-pet/</link><pubDate>Fri, 02 May 2014 16:57:43 +0000</pubDate><guid>https://www.sxn.dev/posts/hnoi2004-pet/</guid><description>&lt;p>没什么好说的，一道不能更裸的TREAP，TREAP这随机种子真是蛋疼。。直接上代码了（原谅我的代码风格，这代码真是长。。）&lt;/p></description></item><item><title>About Me</title><link>https://www.sxn.dev/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.sxn.dev/about/</guid><description>Education 2016-2019 B.S. in Computer Science and Mathematics - Computer Science at Purdue University
2019-2020 M.S. in Computer Science at University of California - San Diego
Links GitHub: https://github.com/shenxn</description></item><item><title>Projects</title><link>https://www.sxn.dev/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.sxn.dev/projects/</guid><description>proton-bridge-docker ProtonMail IMAP/SMTP Bridge Docker Container
GitHub: https://github.com/shenxn/protonmail-bridge-docker
Docker Hub: https://hub.docker.com/r/shenxn/protonmail-bridge
aarch64-build aarch64 builds of libraries
GitHub: https://github.com/shenxn/aarch64-build
library version download NumPy 1.15.4 numpy-1.15.4 SciPy 1.4.1 scipy-1.4.1 HDF5 for Python (hdf5) 2.10.0 hdf5-2-10.0 pytorch-pi-docker Docker image of PyTorch to be used on Raspberry Pi
GitHub: https://github.com/shenxn/pytorch-pi-docker
Docker Hub: https://hub.docker.com/repository/docker/shenxn/pytorch-pi
CS 307 foodie-connector This is a group project for CS 307 Software Engineering I at Purdue University.</description></item></channel></rss>